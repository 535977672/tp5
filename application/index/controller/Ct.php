<?php
namespace app\index\controller;

use think\Controller;
use think\Db;
use \PDO;
set_time_limit(0);
ini_set('memory_limit', '-1');
class ct extends Controller
{
    public  $con1 = [
        // 数据库类型
        'type' => 'mysql',
        // 服务器地址
        'hostname'        => '127.0.0.1',
        // 数据库名
        'database'        => 'mycat',
        // 用户名
        'username' => 'root',
        // 密码
        'password' => 'root',
        // 端口
        'hostport' => '8066',
        // 连接dsn
        'dsn' => '',
        // 数据库连接参数
        'params' => [],
        // 数据库编码默认采用utf8
        'charset' => 'utf8',
        // 数据库表前缀
        'prefix' => '',
        // 数据库调试模式
        'debug' => false,
        // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)
        'deploy' => 0,
        // 数据库读写是否分离 主从式有效
        'rw_separate' => false,
        // 读写分离后 主服务器数量
        'master_num' => 1,
        // 指定从服务器序号
        'slave_no' => '',
        // 自动读取主库数据
        'read_master' => false,
        // 是否严格检查字段是否存在
        'fields_strict' => true,
        // 数据集返回类型
        'resultset_type' => 'array',
        // 自动写入时间戳字段
        'auto_timestamp' => false,
        // 时间字段取出后的默认时间格式
        'datetime_format' => 'Y-m-d H:i:s',
        // 是否需要进行SQL性能分析
        'sql_explain' => false,
        // Builder类
        'builder' => '',
        // Query类
        'query' => '\\think\\db\\Query',
        // 是否需要断线重连
        'break_reconnect' => false,
        // 断线标识字符串
        'break_match_str' => [],
    ];
    
    public  $con2 = [
        // 数据库类型
        'type' => 'mysql',
        // 服务器地址
        'hostname'        => '127.0.0.1',
        // 数据库名
        'database'        => 'mycat',
        // 用户名
        'username' => 'root',
        // 密码
        'password' => 'root',
        // 端口
        'hostport' => '8066',
        // 连接dsn
        'dsn' => '',
        // 数据库连接参数
        'params' => [],
        // 数据库编码默认采用utf8
        'charset' => 'utf8',
        // 数据库表前缀
        'prefix' => '',
        // 数据库调试模式
        'debug' => false,
        // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)
        'deploy' => 0,
        // 数据库读写是否分离 主从式有效
        'rw_separate' => false,
        // 读写分离后 主服务器数量
        'master_num' => 1,
        // 指定从服务器序号
        'slave_no' => '',
        // 自动读取主库数据
        'read_master' => false,
        // 是否严格检查字段是否存在
        'fields_strict' => true,
        // 数据集返回类型
        'resultset_type' => 'array',
        // 自动写入时间戳字段
        'auto_timestamp' => false,
        // 时间字段取出后的默认时间格式
        'datetime_format' => 'Y-m-d H:i:s',
        // 是否需要进行SQL性能分析
        'sql_explain' => false,
        // Builder类
        'builder' => '',
        // Query类
        'query' => '\\think\\db\\Query',
        // 是否需要断线重连
        'break_reconnect' => true,
        // 断线标识字符串
        'break_match_str' => [],
    ];
    
    public function index()
    { 
        set_time_limit(0);
        ini_set('memory_limit', '-1');
        //$n = 100000000;
        $ns = [];
        $n = 100;
        $arr2 = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16'];
        for($i = 0; $i < $n; $i++){
            $arr1 = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33'];
            $r = [];
            for($j = 0; $j < 6; $j++){
                $t = array_rand($arr1);
                $r[] =$arr1[$t];
                unset($arr1[$t]);
            }
            sort($r, SORT_NUMERIC);
            $t2 = array_rand($arr2);
            $r[] = $arr2[$t2];
            
            $num = implode('', $r);
            //$num = '01020309122813';
            //重复查询mycat报错General error: 1220 Unknown pstmtId when executing.
            //$rr = Db::connect($this->con1)->name('cai')->where('num', $num)->find();
            $rr = Db::connect($this->con1)->query("select * from `cai` where `num`=$num limit 1");
            if(!empty($rr)) {
                $nn = intval($rr[0]['n']) + 1;//echo 111;
                //mycat报错General error: 1220 Unknown pstmtId when executing.
                //Db::connect($this->con1)->name('cai')->where('num', $num)->update(['n' => $nn]);
                Db::connect($this->con1)->query("UPDATE `cai` SET `n`=$nn  WHERE `num`=$num");
            }else{
//                $kk = array_search($num, $ns);
//                if($kk === false){
//                    $nnn[] = ['num'=>$num, 'n' => 1];$ns[] = $num;
//                }else{
//                    $nnn[$kk]['n'] = $nnn[$kk]['n']+1;
//                }
//                if($i%10000 == 0 ||($i == $n-1)){
//                    Db::connect($this->con1)->name('cai')->data($nnn)->limit(300)->insertAll();
//                    $nnn = [];
//                    $ns = [];
//                }else if($i%300 == 0 ||($i == $n-1)){
//                    Db::connect($this->con1)->name('cai')->data($nnn)->limit(300)->insertAll();
//                    $nnn = [];
//                    $ns = [];
//                }
            }
            unset($arr1);
            unset($r);
            
            if($i%1000000 == 0){
				echo str_repeat(" ", 1024);//ie/safari
				echo $i.'-'.date('H:i:s').'<br>';// br opear/safari
                ob_flush();
                flush();
            }
        }
        ob_end_flush();
    }
    
    
    public function index1()
    {
        //httpd.conf 配置文件的附加配置：conf/extra/httpd-default.conf
        //在文件httpd-default.conf中，查找行：KeepAlive On, MaxKeepAliveRequests 0
        
        //持久连接 PDO::ATTR_PERSISTENT
        $conn = new PDO("mysql:host=127.0.0.1:8066;dbname=mycat", 'root', 'root',array(PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES \'UTF8\''));
        error_reporting(E_ALL);
        ini_set('display_errors', '1');
        set_time_limit(0);//Connection:close
        ini_set('memory_limit', '-1');
        $ns = [];
        $n = 100000000;
        //$n = 100;
        $nss = $n-1;
        $arr2 = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16'];
        for($i = 0; $i < $n; $i++){
            $arr1 = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33'];
            $r = [];
            for($j = 0; $j < 6; $j++){
                $t = array_rand($arr1);
                $r[] =$arr1[$t];
                unset($arr1[$t]);
            }
            sort($r, SORT_NUMERIC);
            $t2 = array_rand($arr2);
            $r[] = $arr2[$t2];
            
            $num = implode('', $r);
            
            $stmt = $conn->prepare("select * from cai where num = :num limit 1");
            $stmt->execute(array('num' => $num));
            $rr = $stmt->fetchAll(PDO::FETCH_ASSOC);
            if(!empty($rr)) {
                $nn = intval($rr[0]['n']) + 1;
                $stmt = $conn->prepare("UPDATE `cai` SET n = :nn  WHERE num = :num");
                $stmt->execute(array('nn' => $nn, 'num' => $num));
            }else{
                $kk = array_search($num, $ns);
                if($kk === false){
                    $nnn[] = ['num'=>$num, 'n' => 1];$ns[] = $num;
                }else{
                    $nnn[$kk]['n'] = $nnn[$kk]['n']+1;
                }
                if($i != 0 && $i%10000 == 0){
                    //$conn = new PDO("mysql:host=127.0.0.1:8066;dbname=mycat", 'root', 'root',array(PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES \'UTF8\''));
                }
                
                if($i%300 == 0 || $i == $nss){
                    $sql = 'INSERT INTO `cai` (`num` , `n`) VALUES ';
                    foreach ($nnn as $v){
                        $sql .= '(' . $v['num'] . ', ' .$v['n'] . ') , ';
                    }
                    $sql = substr($sql, 0, -3);
                    $stmt = $conn->prepare($sql);
                    $stmt->execute();
                    $nnn = [];
                    $ns = [];
                    $sql = '';
                }
            }
            $stmt = '';
            $arr1 = [];$r = [];
           // unset($arr1);//unset（）并没有释放变量所指向的那块内存，而只是将变量指针销毁了
            //unset($r);
            
            if($i%1000000 == 0){
				echo str_repeat(" ", 1024);//ie/safari
				echo $i.'-'.date('H:i:s').'<br>';// br opear/safari
                ob_flush();
                flush();
            }
        }
        ob_end_flush();
    }
    
    public function count()
    { 
        $count = Db::connect($this->con1)->name('cai')->count();
        var_dump($count);
    }
    
    public function sum()
    { 
        $sum = Db::connect($this->con1)->name('cai')->sum('n');
        var_dump($sum);
    }
    
    public function t()
    { 
        //mycat报错General error: 1220 Unknown pstmtId when executing.
        //$rr = Db::connect($this->con1)->name('cai')->where('num', 111)->select();
        //$rr = Db::connect($this->con1)->name('cai')->where('num', 1419098091)->select();
        
        $rr = Db::connect($this->con1)->query("select * from cai  limit 1");
        var_dump($rr[0]);
        $rr = Db::connect($this->con1)->query("select * from cai where num in (04080925303202,01112226273205,06161829303107)");
        var_dump($rr);
        //$rr = Db::connect($this->con1)->query("INSERT INTO `cai` (`num` , `n`) VALUES ( '04080925303202',1 ) , ( '01112226273205',1 ) , ( '06161829303107',1 )");
        
        var_dump($rr);
    }
    
    
    
    public function max()
    { 
        $sum = Db::connect($this->con1)->name('cai')->max('n');
        var_dump($sum);
    }
    
        
    
    public function truncate()
    { 
        $r = Db::connect($this->con1)->query("TRUNCATE TABLE cai");
        var_dump($r);
    }
    
    
    
    public function wq() {
        $r = "04111216171814',1 ) , ( '01070920263204',1 ) , ( '04172326313215',1 ) , ( '01020815173104',1 ) , ( '01030717242512',1 ) , ( '05061022283108',1 ) , ( '03101118202903',1 ) , ( '18192023242508',1 ) , ( '04050810122410',1 ) , ( '04101114253215',1 ) , ( '10111314273106',1 ) , ( '01070813163009',1 ) , ( '02081822283016',1 ) , ( '04061015161813',1 ) , ( '04051619273116',1 ) , ( '02041321293310',1 ) , ( '04101113213010',1 ) , ( '04061524273305',1 ) , ( '05081117253207',1 ) , ( '03061124262914',1 ) , ( '01111820213013',1 ) , ( '04121317283310',1 ) , ( '03111315232404',1 ) , ( '01041516313202',1 ) , ( '10152124252713',1 ) , ( '04060711123306',1 ) , ( '07111516202711',1 ) , ( '06111217232604',1 ) , ( '02131516262704',1 ) , ( '04071415232907',1 ) , ( '06162223253301',1 ) , ( '06111624253105',1 ) , ( '01030411133006',1 ) , ( '01031621222404',1 ) , ( '07091122263316',1 ) , ( '05071718313315',1 ) , ( '01141724273007',1 ) , ( '06091920252805',1 ) , ( '01101318212906',1 ) , ( '03151618283011',1 ) , ( '02030910111213',1 ) , ( '01131516233101',1 ) , ( '06091015183004',1 ) , ( '05101116242513',1 ) , ( '01031017273305',1 ) , ( '02071012172309',1 ) , ( '04111922232705',1 ) , ( '03141720222713',1 ) , ( '08091219203207',1 ) , ( '02151625303304',1 ) , ( '06102324253113',1 ) , ( '03112022232414',1 ) , ( '01091319242704',1 ) , ( '01101220293303',1 ) , ( '06111523252709',1 ) , ( '01040607182016',1 ) , ( '02051213253314',1 ) , ( '06121618222412',1 ) , ( '02070818222406',1 ) , ( '08151823293312',1 ) , ( '01131520293315',1 ) , ( '10152022303311',1 ) , ( '01020405273207',1 ) , ( '02050811172607',1 ) , ( '19222430313209',1 ) , ( '01070821243303',1 ) , ( '02040918213114',1 ) , ( '02030411242703',1 ) , ( '11192224253306',1 ) , ( '04050611172603',1 ) , ( '01070921293103',1 ) , ( '11181924283315',1 ) , ( '03151723252806',1 ) , ( '01122324293215',1 ) , ( '08121823262807',1 ) , ( '04151822303113',1 ) , ( '06182123283212',1 ) , ( '02051114222510',1 ) , ( '05072023262915',1 ) , ( '02101219223310',1 ) , ( '04101820293009',1 ) , ( '01030519273208',1 ) , ( '01050811192601',1 ) , ( '04061416192907',1 ) , ( '03111428293014',1 ) , ( '05121318212406',1 ) , ( '01081117192614',1 ) , ( '06081314202802',1 ) , ( '09101819212403',1 ) , ( '01081618192612',1 ) , ( '07080910182005',1 ) , ( '07091415273215',1 ) , ( '02131826323316',1 ) , ( '17181921222712',1 ) , ( '01031925272910',1 ) , ( '01101216293205',1 ) , ( '04091315173104',1 ) , ( '06071420242509',1 ) , ( '13162123243309',1 ) , ( '02050709162704',1 ) , ( '02041114192314',1 ) , ( '02111319203015',1 ) , ( '01041215203110',1 ) , ( '06142326293112',1 ) , ( '02061420212208',1 ) , ( '01030919212302',1 ) , ( '02050708141512',1 ) , ( '02101115172013',1 ) , ( '05101116213310',1 ) , ( '02061118253204',1 ) , ( '08091017262904',1 ) , ( '02101820222702',1 ) , ( '08101213202506',1 ) , ( '03070816192208',1 ) , ( '17212229303212',1 ) , ( '07121415253003',1 ) , ( '01061223293209',1 ) , ( '14202425283004',1 ) , ( '02121823273004',1 ) , ( '03101617202201',1 ) , ( '13141628293215',1 ) , ( '02141519202812',1 ) , ( '01141722313205',1 ) , ( '07081121223305',1 ) , ( '04091822313309',1 ) , ( '02081422273311',1 ) , ( '01041216272912',1 ) , ( '01061627293005',1 ) , ( '11141522232514',1 ) , ( '01020411313309',1 ) , ( '07131416172514',1 ) , ( '14172024273012',1 ) , ( '03051820283008',1 ) , ( '05121819303108',1 ) , ( '04061625303313',1 ) , ( '02030408252901',1 ) , ( '01030917193011',1 ) , ( '15182025263308',1 ) , ( '01020809122010',1 ) , ( '13152022242809',1 ) , ( '16181927293214',1 ) , ( '11131720263207',1 ) , ( '09111219263008',1 ) , ( '03132021242614',1 ) , ( '01111217262805',1 ) , ( '01071114293311',1 ) , ( '03121721253116',1 ) , ( '03040917293314',1 ) , ( '04051020293110',1 ) , ( '04161718192615',1 ) , ( '01081621232707',1 ) , ( '02060917283205',1 ) , ( '05061519203307',1 ) , ( '03061113212615',1 ) , ( '06192123273208',1 ) , ( '01070816182314',1 ) , ( '01020813192813',1 ) , ( '02101524252812',1 ) , ( '02040911212814',1 ) , ( '03040921233302',1 ) , ( '01040521263211',1 ) , ( '08112122242609',1 ) , ( '03181920253113',1 ) , ( '05081118242614',1 ) , ( '03060708092505',1 ) , ( '01022127293312',1 ) , ( '08121718273304',1 ) , ( '05092023273103',1 ) , ( '01020407222514',1 ) , ( '07131516223213',1 ) , ( '01070925263308',1 ) , ( '02031415272911',1 ) , ( '01141823293109',1 ) , ( '01032225263201',1 ) , ( '01071827313314',1 ) , ( '02051314263202',1 ) , ( '06122129303109',1 ) , ( '04050709263004',1 ) , ( '01021516202708',1 ) , ( '09131417202810',1 ) , ( '08192124303312',1 ) , ( '04071623252806',1 ) , ( '06091118212907',1 ) , ( '05061216212502',1 ) , ( '01031321262806',1 ) , ( '02051623273113',1 ) , ( '03071017212914',1 ) , ( '02050610152613',1 ) , ( '05091120242910',1 ) , ( '04091223323307',1 ) , ( '03111621233316',1 ) , ( '05060709273115',1 ) , ( '01021224273306',1 ) , ( '04071012262916',1 ) , ( '11161725303305',1 ) , ( '08091318242914',1 ) , ( '03061118212904',1 ) , ( '01071415252613',1 ) , ( '02080924303115',1 ) , ( '01030708113306',1 ) , ( '01040514212214',1 ) , ( '03051526273213',1 ) , ( '01172021263201',1 ) , ( '05081322273207',1 ) , ( '06101314203316',1 ) , ( '01020312152013',1 ) , ( '12131622293009',1 ) , ( '11131822323309',1 ) , ( '03101516252701',1 ) , ( '19212327293015',1 ) , ( '03041621242915',1 ) , ( '14181925323301',1 ) , ( '05111821222607',1 ) , ( '01020313223216',1 ) , ( '01050914182111',1 ) , ( '02041228293009',1 ) , ( '05081624273111',1 ) , ( '05061723273005',1 ) , ( '12172025273108',1 ) , ( '07142425262707',1 ) , ( '04051525263310',1 ) , ( '02031415243011',1 ) , ( '03101320283308',1 ) , ( '08101316173201',1 ) , ( '03060711283212',1 ) , ( '06091018222501',1 ) , ( '07081427323304',1 ) , ( '05161821313210',1 ) , ( '11141721262904',1 ) , ( '01031719252607',1 ) , ( '05101213143103',1 ) , ( '02101120233315',1 ) , ( '14152123303201',1 ) , ( '03101112213112',1 ) , ( '01222324253315',1 ) , ( '03131924262812',1 ) , ( '02051920252614',1 ) , ( '03040721232915',1 ) , ( '01022326273103',1 ) , ( '03111718242604',1 ) , ( '12192125313311',1 ) , ( '05081619232409',1 ) , ( '01060819232415',1 ) , ( '06091221222802',1 ) , ( '01051012222903',1 ) , ( '08111214172516',1 ) , ( '14182123253016',1 ) , ( '02060708121307',1 ) , ( '04061525262906',1 ) , ( '07131624253310',1 ) , ( '02061518192913',1 ) , ( '02041220212814',1 ) , ( '01121617203205',1 ) , ( '05091013172008',1 ) , ( '03091214152110',1 ) , ( '01020415181902',1 ) , ( '06132223273303',1 ) , ( '17212427323307',1 ) , ( '01101820273016',1 ) , ( '01041023262812',1 ) , ( '01142126293310',1 ) , ( '03051214193209',1 ) , ( '01050712213309',1 ) , ( '03040608243204',1 ) , ( '01031114182115',1 ) , ( '01061216323303',1 ) , ( '05061619222406',1 ) , ( '04081316323313',1 ) , ( '08151928293311',1 ) , ( '01040709162615',1 ) , ( '16172526283111',1 ) , ( '07121822243014',1 ) , ( '01020611212603',1 ) , ( '01021420232412',1 ) , ( '02111926313214',1 ) , ( '01060813151905',1 ) , ( '06081619213105',1 ) , ( '09121318253111',1 ) , ( '02101619273216',1 ) , ( '10192324293314',1 ) , ( '02111315193003',1 ) , ( '21242729323312',1 ) , ( '02121323282907',1 ) , ( '01081320303211',1 ) , ( '05081320263312',1 ) , ( '12161825263205',1 ) , ( '01050815213013',1 ) , ( '03040915192616',1 ) , ( '04081016203311',1 ) , ( '13161825272802',1 ) , ( '06070810171813',1 ) , ( '02071618222510',1 ) , ( '01050708092104',1 ) , ( '01051314252604',1 ) , ( '01062223262708',1 ) , ( '03101417222512',1 ) , ( '03131617222508',1 ) , ( '03131618252707',1 ) , ( '07081112192007',1 ) , ( '08111217233215";
        $rr = explode("',1 ) , ( '", $r);
        array_unique($rr);
        
        var_dump($rr);
    }
   
}
